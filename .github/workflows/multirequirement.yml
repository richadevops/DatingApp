name: Multirequirement
 
on:
  push:

  workflow_dispatch:
    inputs:
      deploy_mode:
        required: true
        default: "sequential"
        type: choice
        options:
          - single
          - sequential
      environment:
        required: true
        default: "all"
        type: choice
        options:
          - sit
          - qa
          - uat
          - all
 
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build-list: ${{ steps.set-build-list.outputs.list }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
 
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
 
      - name: Determine build environments
        id: set-build-list
        shell: bash
        run: |
         MODE="${{ github.event.inputs.mode }}"
         ENV="${{ github.event.inputs.environment }}"
         ORDER=("sit" "qa" "uat")
         BUILD_LIST=()
 
         if [ "$MODE" = "single" ]; then
         BUILD_LIST=("$ENV")
         elif [ "$MODE" = "partial" ]; then
         for e in "${ORDER[@]}"; do
          BUILD_LIST+=("$e")
         if [ "$e" = "$ENV" ]; then
         break
         fi
          done
         else
          BUILD_LIST=("${ORDER[@]}")
         fi
 
         echo "Environments to build: ${BUILD_LIST[@]}"
         echo "::set-output name=list::${BUILD_LIST[*]}"
 
 
      - name: Build & Publish for each environment
        shell: bash
        run: |
          BUILD_LIST=(${{ steps.set-build-list.outputs.list }})
          for e in "${BUILD_LIST[@]}"; do
            echo "=== Building for $e ==="
            cd client
            npm ci
            npx ng build --configuration "$e"
            cd ..
            dotnet publish API/API.csproj -c Release -o "./publish-$e"
          done
 
      - name: Upload SIT artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-sit
          path: ./publish-sit
 
      - name: Upload QA artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-qa
          path: ./publish-qa
 
      - name: Upload UAT artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-uat
          path: ./publish-uat
 
  deploy-sit:
    runs-on: ubuntu-latest
    needs: build
    environment: SIT

    if: ${{ contains(needs.build.outputs.build-list, 'sit') }}

    steps:
      - name: Download SIT artifact
        uses: actions/download-artifact@v4
        with:
          name: app-sit
          path: ./publish-sit
 
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3.0.5
        with:
           app-name: ${{ secrets.APP_SERVICE_NAME }}   
           publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
           package: ./publish-sit
 
 
  deploy-qa:
    runs-on: ubuntu-latest
    needs: [build, deploy-sit]
    environment: QA
    if: |
      always() &&
      contains(needs.build.outputs.build-list, 'qa') &&
      (
       !contains(needs.build.outputs.build-list, 'sit') ||
       (contains(needs.build.outputs.build-list, 'sit') && needs.deploy-sit.result == 'success')
      )
    steps:
      - name: Download QA artifact
        uses: actions/download-artifact@v4
        with:
          name: app-qa
          path: ./publish-qa
 
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3.0.5
        with:
           app-name: ${{ secrets.APP_SERVICE_NAME }}   
           publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
           package: ./publish-qa
 
 
  deploy-uat:
    runs-on: ubuntu-latest
    needs: [build, deploy-qa]

    environment: UAT

    if: |
       always() &&
       contains(needs.build.outputs.build-list, 'uat') &&
       (
         !contains(needs.build.outputs.build-list, 'qa') ||
         (contains(needs.build.outputs.build-list, 'qa') && needs.deploy-qa.result == 'success')
       )
    steps:
      - name: Download UAT artifact
        uses: actions/download-artifact@v4
        with:
          name: app-uat
          path: ./publish-uat
 
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3.0.5
        with:
           app-name: ${{ secrets.APP_SERVICE_NAME }}   
           publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
           package: ./publish-uat

 
